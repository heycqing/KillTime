( 13 , 18 , 24 , 35 , 47 , 50 , 63 , 83 , 90 , 115 , 124 )

- 用到 `二分法` 的情况
    + 二分法查找适用于数据量较大时，但是数据需要先排好顺序

- `二分法` 的秘诀
    + 若a[mid]<x,说明待查找的元素值只可能在比中项元素大的范围内，则把mid+1的值赋给front，并重新计算mid，转去执行步骤2；
    + 若a[mid]>x，说明待查找的元素值只可能在比中项元素小的范围内，则把mid-1的值赋给end，并重新计算mid，转去执行步骤2。

> 需要查找的数是： 90 



round1

```js

    font = 0
    end  = 10
    mid = (font+end)/2 = 5
    所以 a[mid] = 50
    因为 a[mid] < 90 ,所以需要在 `后半段`: ` (  63 , 83 , 90 , 115 , 124 ) `中查找

```

round2:

```js
    font = mid + 1 = 6 
    end = 10  
    mid = (font+end)/2 = 8
    所以 a[mid] = 90
    因为 a[mid] = 90 , 所以停止查找
```


